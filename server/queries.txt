* The datatype name must be written in Camel casing or else it would work.
    Eg.
        isInTheaters: Boolean
* If a data can not be null then (!) must be present in the end of the data type. 
    Eg.
        name: String!

input keyword
- It is beter to use input for the mutation of data as it allows us to provide a default value rather than a null for a property/scalar. 
  Eg.
    input CreateUserInput {
    name: String!
    username: String!
    age: Int = 18
    nationality: Nationality!
  }


user: (parent, args, context, info) => {
      const id = args.id;
      const user = _.find(UserList, { id: Number(id) });
      return user;
    },

- parent: It provides access to the parent Query datatype
  Eg. 
    Query -> Users -> favoriteMovies
- args: It give access to the inputs of the arguement
- context: It allows objects to be accessible to every resolver function
- info: 


Queries:

# User Queries

query GetAllUsers {
  users {
    id
    name
    age
    nationality
    friends {
      name
      age
    }
  }
}

query GetUser($userId: ID!){
  user(id: $userId) {
    name
    age
    nationality
  }
}

# Movie Queries

query GetAllMovies {
  movies {
    name
    yearOfPublication
    isInTheaters
  }
}

query GetMovie($name: String!){
  movie(name: $name) {
    name
    yearOfPublication
    isInTheaters
  }
}

# User Query to show favorite movie using a root type User

query GetUserWFavoriteMovie($userId: ID!){
  user(id: $userId) {
    name
    age
    nationality
    friends {
      name
      nationality
    }
    favoriteMovies {
      name
      yearOfPublication
      isInTheaters
    }
  }
}

# Mutation Queries

# Creates a new User

mutation CreateUser($input: CreateUserInput!){
  createUser(input: $input) {
    id
    name
    age
  }
}

# Update username

mutation UpdateUser($input: UpdateUsernameInput!){
  updateUsername(input: $input) {
    id
    username
  }
}